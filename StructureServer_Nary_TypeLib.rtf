{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033\deflangfe1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\fswiss\fprq2 Arial;}{\f2\fnil\fcharset0 Arial;}{\f3\fnil\fcharset0 Times New Roman;}}
{\colortbl ;\red0\green0\blue0;}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\nowidctlpar\fi-5\li84\ri55\f0\fs16\lang2057 (Autogenerated by TLViewer, \'a9 Mark Pryor 2000-2003) \par
\par
\fs22 Library: \b StructureServer_Nary_TypeLib\b0\par
\fs18\tab G:\\boss\\BOSS.Nary.dll \par
\tab Description: StructureServer_Nary_TypeLib \par
\par
\f1\fs22 coclass \b Nary\b0\par
\f0\fs16\tab StructureServer_Nary_TypeLib\par
\fs18 Function \cf1\b\f2 Append\b0 (\i ByVal \b parent \b0 As \i0 String, \par
\tab\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Inserts a NODE as the last child of the given PARENT, returning inserted NODE. \f3\par
Function \b\f2 Append_Data\b0 (\i ByVal \b parent \b0 As \i0 String, \par
\tab\i ByVal \b data \b0\i0 ) As String\cf0\b\f0\par
\cf1\b0\f2   Inserts a new node containing DATA as the last child of the given PARENT. Returns the new inserted node. \f3\par
Property \b\f2 AsLisp\b0  As String [Get/o]\cf0\b\f0\par
\cf1\b0\f2   Result of converting P-Lisp to Lisp. \f3\par
Function \b\f2 Child_Index\b0 (\i ByVal \b node \b0 As \i0 String, \par
\tab\i ByVal \b data \b0\i0 ) As Long\cf0\b\f0\par
\cf1\b0\f2   Gets the position of the first child of a NODE which contains the given DATA. Returns the index of the child of node which contains data, or -1 if DATA is not found. \f3\par
Function \b\f2 Child_Position\b0 (\i ByVal \b node \b0 As \i0 String, \par
\tab\i ByVal \b child \b0 As \i0 String) As Long\cf0\b\f0\par
\cf1\b0\f2   Gets the position of a NODE with respect to its siblings. CHILD must be a child of NODE. The first child is numbered 0, the second 1, and so on. Returns the position of CHILD with respect to its siblings. \f3\par
Function \b\f2 Children_ForEach\b0 (\i ByVal \b node \b0 As \i0 String, \par
\tab\i ByVal \b flags \b0 As \i0 Long, \par
\tab [\i ByVal \b sepMode \b0 As \i0 Long]) As Variant\cf0\b\f0\par
\cf1\b0\f2   Calls a FUNCTION (with optional user DATA to pass to the FUNCTION) for each of the children of a NODE. Note that it doesn't descend beneath the child nodes. FLAGS specifies which types of children are to be visited, one of TRAVERSE_ALL, TRAVERSE_LEAFS and TRAVERSE_NON_LEAFS. \f3\par
Function \b\f2 ClearNaryToLisp\b0 () As String\cf0\b\f0\par
\cf1\b0\f2   Clear storage of NAry Tree to P-Lisp structure. \f3\par
Function \b\f2 Depth\b0 (\i ByVal \b node \b0 As \i0 String) As Long\cf0\b\f0\par
\cf1\b0\f2   Returns the depth of NODE. If NODE is undef, the depth is 0. The root node has a depth of 1. For the children of the root node, the depth is 2. And so on. \f3\par
Function \b\f2 Find\b0 (\i ByVal \b node \b0 As \i0 String, \par
\tab\i ByVal \b order \b0 As \i0 Long, \par
\tab\i ByVal \b flags \b0 As \i0 Long, \par
\tab\i ByVal \b data \b0\i0 ) As String\cf0\b\f0\par
\cf1\b0\f2   Finds a NODE in a tree with the given DATA. \f3\par
Function \b\f2 Find_Child\b0 (\i ByVal \b node \b0 As \i0 String, \par
\tab\i ByVal \b flags \b0 As \i0 Long, \par
\tab\i ByVal \b data \b0\i0 ) As String\cf0\b\f0\par
\cf1\b0\f2   Finds the first child of a NODE with the given DATA. \f3\par
Function \b\f2 First_Child\b0 (\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Returns the first child of a NODE. Returns undef if NODE is undef or has no children. \f3\par
Function \b\f2 First_Sibling\b0 (\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Returns the first sibling of a NODE. This could possibly be the NODE itself. \f3\par
Function \b\f2 Get_Root\b0 (\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Gets the root node of a tree, starting from NODE. \f3\par
Function \b\f2 Has_Same_Struct\b0 (\i ByVal \b node \b0 As \i0 String, \par
\tab\i ByVal \b another_node \b0 As \i0 String) As Boolean\cf0\b\f0\par
\cf1\b0\f2   Returns TRUE if the structure of NODE and ANOTHER_NODE are identical. \f3\par
Property \b\f2 IN_ORDER\b0  As Long [Get/o]\cf0\b\f0\par
\cf1\b0\f2   Visit a node's left child first, then the node itself, then its right child. This is the one to use if you want the output sorted according to the compare function. \f3\par
Function \b\f2 Insert\b0 (\i ByVal \b parent \b0 As \i0 String, \par
\tab\i ByVal \b position \b0 As \i0 Long, \par
\tab\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Inserts a NODE beneath the PARENT at the given POSITION, returning inserted NODE. If POSITION is -1, NODE is inserted as the last child of PARENT. \f3\par
Function \b\f2 Insert_Before\b0 (\i ByVal \b parent \b0 As \i0 String, \par
\tab\i ByVal \b sibling \b0 As \i0 String, \par
\tab\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Inserts a NODE beneath the PARENT before the given SIBLING, returning inserted NODE. If SIBLING is undef, the NODE is inserted as the last child of PARENT. \f3\par
Function \b\f2 Insert_Data\b0 (\i ByVal \b parent \b0 As \i0 String, \par
\tab\i ByVal \b position \b0 As \i0 Long, \par
\tab\i ByVal \b data \b0\i0 ) As String\cf0\b\f0\par
\cf1\b0\f2   Inserts a new node containing DATA, beneath the PARENT at the given POSITION. Returns the new inserted node. \f3\par
Function \b\f2 Insert_Data_Before\b0 (\i ByVal \b parent \b0 As \i0 String, \par
\tab\i ByVal \b sibling \b0 As \i0 String, \par
\tab\i ByVal \b data \b0\i0 ) As String\cf0\b\f0\par
\cf1\b0\f2   Inserts a new node containing DATA, beneath the PARENT, before the given SIBLING. Returns the new inserted node. \f3\par
Function \b\f2 Is_Ancestor\b0 (\i ByVal \b node \b0 As \i0 String, \par
\tab\i ByVal \b descendant \b0 As \i0 String) As Boolean\cf0\b\f0\par
\cf1\b0\f2   Returns TRUE if NODE is an ancestor of DESCENDANT. This is true if NODE is the parent of DESCENDANT, or if NODE is the grandparent of DESCENDANT, etc. \f3\par
Function \b\f2 Is_Identical\b0 (\i ByVal \b node \b0 As \i0 String, \par
\tab\i ByVal \b another_node \b0 As \i0 String) As Boolean\cf0\b\f0\par
\cf1\b0\f2   Returns TRUE if NODE and ANOTHER_NODE have same structures and contents. \f3\par
Function \b\f2 Is_Leaf\b0 (\i ByVal \b node \b0 As \i0 String) As Boolean\cf0\b\f0\par
\cf1\b0\f2   Returns TRUE if NODE is a leaf node (no children). \f3\par
Function \b\f2 Is_Root\b0 (\i ByVal \b node \b0 As \i0 String) As Boolean\cf0\b\f0\par
\cf1\b0\f2   Returns TRUE if NODE is a root node (no parent nor siblings). \f3\par
Function \b\f2 Last_Child\b0 (\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Returns the last child of a NODE. Returns undef if NODE is undef or has no children. \f3\par
Function \b\f2 Last_Sibling\b0 (\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Returns the last sibling of a NODE. This could possibly be the NODE itself. \f3\par
Property \b\f2 LEVEL_ORDER\b0  As Long [Get/o]\cf0\b\f0\par
\cf1\b0\f2   Call the function for each child of the node, then recursively visit each child. \f3\par
Function \b\f2 LispToNary\b0 (\i ByVal \b lispText \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Convert Lisp structure into NAry Tree. \f3\par
Function \b\f2 Max_Height\b0 (\i ByVal \b node \b0 As \i0 String) As Long\cf0\b\f0\par
\cf1\b0\f2   Returns the maximum height of all branches beneath NODE. This is the maximum distance from NODE to all leaf nodes. \f3\par
Function \b\f2 N_Children\b0 (\i ByVal \b node \b0 As \i0 String) As Long\cf0\b\f0\par
\cf1\b0\f2   Returns the number of children of NODE. \f3\par
Function \b\f2 N_Nodes\b0 (\i ByVal \b node \b0 As \i0 String, \par
\tab\i ByVal \b method \b0 As \i0 Long) As Long\cf0\b\f0\par
\cf1\b0\f2   Returns the number of nodes in a tree. \f3\par
Function \b\f2 NaryToLisp\b0 (\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Convert NAry Tree to P-Lisp structure. \f3\par
Function \b\f2 New\b0 ([\i ByVal \b data \b0\i0 ]) As String\cf0\b\f0\par
\cf1\b0\f2   Creates a new Tree::Nary object. Used to create the first node in a tree. Insert optional DATA into new created node. \f3\par
Function \b\f2 Next_Sibling\b0 (\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Returns the next sibling of a NODE. \f3\par
Function \b\f2 Node_Children\b0 (\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Returns NODE's children (first child). \f3\par
Function \b\f2 Node_Data\b0 (\i ByVal \b node \b0 As \i0 String, \par
\tab [\i ByVal \b data \b0\i0 ]) As Variant\cf0\b\f0\par
\cf1\b0\f2   Returns NODE's data. \f3\par
Function \b\f2 Node_Next\b0 (\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Returns NODE's next. \f3\par
Function \b\f2 Node_Parent\b0 (\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Returns NODE's parent. \f3\par
Function \b\f2 Node_Prev\b0 (\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Returns NODE's previous. \f3\par
Function \b\f2 Normalize\b0 (\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Returns the normalized shape of NODE. \f3\par
Function \b\f2 Nth_Child\b0 (\i ByVal \b node \b0 As \i0 String, \par
\tab\i ByVal \b index \b0 As \i0 Long) As String\cf0\b\f0\par
\cf1\b0\f2   Gets a child of a NODE, using the given INDEX. The first child is at INDEX 0. If the INDEX is too big, undef is returned. Returns the child of NODE at INDEX. \f3\par
Property \b\f2 POST_ORDER\b0  As Long [Get/o]\cf0\b\f0\par
\cf1\b0\f2   Visit the node's children, then the node itself \f3\par
Property \b\f2 PRE_ORDER\b0  As Long [Get/o]\cf0\b\f0\par
\cf1\b0\f2   Visit a node, then its children. \f3\par
Function \b\f2 Prepend\b0 (\i ByVal \b parent \b0 As \i0 String, \par
\tab\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Inserts a NODE as the first child of the given PARENT, returning inserted NODE. \f3\par
Function \b\f2 Prepend_Data\b0 (\i ByVal \b parent \b0 As \i0 String, \par
\tab\i ByVal \b data \b0\i0 ) As String\cf0\b\f0\par
\cf1\b0\f2   Inserts a new node containing DATA as the first child of the given PARENT. Returns the new inserted node. \f3\par
Function \b\f2 Prev_Sibling\b0 (\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Returns the previous sibling of a NODE. \f3\par
Function \b\f2 Reverse_Children\b0 (\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Reverses the order of the children of NODE. It doesn't change the order of the grandchildren. \f3\par
Function \b\f2 Traverse\b0 (\i ByVal \b node \b0 As \i0 String, \par
\tab\i ByVal \b order \b0 As \i0 Long, \par
\tab\i ByVal \b flags \b0 As \i0 Long, \par
\tab\i ByVal \b maxdepth \b0 As \i0 Long, \par
\tab [\i ByVal \b sepMode \b0 As \i0 Long]) As Variant\cf0\b\f0\par
\cf1\b0\f2   Traverses a tree starting at the given root NODE. It calls the given FUNCTION (with optional user DATA to pass to the FUNCTION) for each node visited. \f3\par
Property \b\f2 TRAVERSE_ALL\b0  As Long [Get/o]\cf0\b\f0\par
\cf1\b0\f2   Specifies that all nodes should be visited. \f3\par
Property \b\f2 TRAVERSE_LEAFS\b0  As Long [Get/o]\cf0\b\f0\par
\cf1\b0\f2   Specifies that only leaf nodes should be visited. \f3\par
Property \b\f2 TRAVERSE_MASK\b0  As Long [Get/o]\cf0\b\f0\par
\cf1\b0\f2   Combination of multiple traverse flags. \f3\par
Property \b\f2 TRAVERSE_NON_LEAFS\b0  As Long [Get/o]\cf0\b\f0\par
\cf1\b0\f2   Specifies that only non-leaf nodes should be visited. \f3\par
Function \b\f2 TSort\b0 (\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Sorts all the children references of NODE according to the data field. \f3\par
Function \b\f2 Unlink\b0 (\i ByVal \b node \b0 As \i0 String) As String\cf0\b\f0\par
\cf1\b0\f2   Unlinks NODE from a tree, resulting in two separate trees. The NODE to unlink becomes the root of a new tree. \f3\par
\par
}
 